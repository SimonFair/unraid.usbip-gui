#!/usr/bin/php
<?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2020, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin = "unraid.usbip-gui";
$docroot = $docroot ?: @$_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
require_once("$docroot/plugins/{$plugin}/include/lib_usbip.php");
require_once("webGui/include/Helpers.php");
require_once "$docroot/plugins/dynamix.vm.manager/include/libvirt_helpers.php";

$COMMAND = $argv[1];

if ($COMMAND != 'spindown') {
	$DEVNAME = (isset($_ENV['DEVNAME'])) ? $_ENV['DEVNAME'] : ( isset($argv[2]) ? $argv[2] : NULL );
	$DEVNAME = (file_exists($DEVNAME)) ? realpath($DEVNAME) : $DEVNAME;
} else {
	$DEVNAME = $argv[2];
}
$remove  = [];
#if (! $DEVNAME) die("Fail: device not defined.\n");

function usbip_modules_load() {
	global $plugin, $config;
	# Get Config file if load module is *YES process.

	$config_file = "/tmp/$plugin/config/$plugin.cfg";
	$cfg = is_file($config_file) ? @parse_ini_file($config_file, true) : array();
	$config = $cfg["Config"];

	
	if ($config["usbip_host"] == "yes") {
		usbip_log("info: Loading kernel module usbip_host");
		exec("modprobe usbip-host") ;
	}
	if ($config["vhci_hcd"] == "yes") {
		usbip_log("info: Loading kernel module vhci_hcd");
		exec("modprobe vhci_hcd") ;
	}

}

function usbipd_start() {
	$pid=shell_exec("pgrep usbipd") ;
	if ($pid!="") return ;
	usbip_log("Start usbipd");
	exec("usbipd -D --pid") ;	
}

function usbipd_stop() {
	$pid=shell_exec("pgrep usbipd") ;
	if ($pid==NULL) return ;
	usbip_log("Shutdown usbipd");	
	exec("killall usbipd") ;
}

function usbip_reload() {
	if (isset($_ENV['DEVLINKS'])) {
		foreach (explode(" ", $_ENV['DEVLINKS']) as $link) {
			get_udev_info($link, $_ENV, true);
		}
	}
}

function usbip_check_config() {
	global $config ;
	usbip_modules_load() ;
	$pid=shell_exec("pgrep -c  usbipd") ;
	if ($config["USBIPD"]=="enabled") {
		usbipd_start() ;
	} else {
		usbipd_stop() ;
	}		
}

function usb_device_add_action($serial)
{

		$vm = get_vm_config($serial, "VM");

		$state = get_vm_state($vm) ;

		$vm .= ";".$_ENV['BUSNUM'].";".$_ENV['DEVNUM'].";".$_ENV['ID_SERIAL'] ;	

		USBMgrCreateStatusEntry($_ENV['ID_SERIAL'], $_ENV['BUSNUM'], $_ENV['DEVNUM']) ;

		if (is_autoconnect($serial) == false ) {
		#	vm_map_action($vm, "none") ;
			return ;
		}

		if ($state != "shutoff") {
		usbip_log("Info: rc.unraid.usbip-gui Autoconnect vm state:{$state} {$_ENV['ID_SERIAL']} {$state} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']}");
		vm_map_action($vm, "attach") ;
		}
		else { 
		#	vm_map_action($vm, "none") ;
			usbip_log("Info: rc.unraid.usbip-gui Autoconnect ignored VM not running state:{$state} {$_ENV['ID_SERIAL']} {$_ENV['DEVNAME']} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']}"); 
		}	


}

function usb_device_remove_action($bus, $dev)
{
	global $usb_state;
	load_usbstate(); 

    foreach ($usb_state as $key => $usbdevice) {

	 if ($usbdevice["bus"] == $bus && $usbdevice["dev"] == $dev) {
	   $vm = $usbdevice["VM"] ;
	   $serial = $key ;
	}
}
#var_dump($serial) ; var_dump($vm) ;

   if (isset($serial)) {

		$state = get_vm_state($vm) ;
		
		remove_usbstate($serial) ;
		usbip_log("Info: rc.unraid.usbip-gui Removed {$serial} vm: {$vm}  {$_ENV['BUSNUM']} {$_ENV['DEVNUM']}");
   
   }
}

function process_vm_usb_devices($vm, $action) {
		 global $usb_state;
		 load_usbstate(); 
	
	$vm_mappings=load_vm_mappings(); 
    #var_dump($vm_mappings) ;
    foreach ($vm_mappings as $key => $vm_map) {
	  if ($vm == $vm_map["VM"]) {

	    if (isset($usb_state[$key])	)
        {
	     $bus = $usb_state[$key]["bus"];
	     $dev = $usb_state[$key]["dev"];

	     #var_dump($key) ;
	     #var_dump($bus) ;
	     #var_dump($dev) ;
	     #var_dump($vm) ;

	
		$vmname = $vm.";".$bus.";".$dev.";".$key ;
	    #  var_dump($key) ;
	    if ($action == "stopped") {
		  # Update usb.ini. Remove VM and Connected.

		  save_usbstate($key, "virsherror" , false) ;
		  save_usbstate($key, "connected" , false) ;
		  save_usbstate($key, "VM" , "") ;
		  usbip_log("Info: rc.unraid.usbip-gui VM Shutdown {$key} vm: {$vm} ");
		}
	 
	    if ($action == "prepare") {
		   if ($vm_map["autoconnectstart"] == "yes") {
			   vm_map_action($vmname, "attach") ;
			   usbip_log("Info: rc.unraid.usbip-gui Autoconnect Start {$key} vm: {$vm} ");
		    }
	     }
	    }
	}
}
}

function usbip_syslog_processing($busid) {

	exec("tail -n 20 /var/log/syslog", $syslog ) ;
	var_dump($busid) ;
#	$syslog=array_reverse($syslog) ;

#	$busid = $argv[3] ;

#	foreach ($syslog as $syslog_entry) {

	#	Feb 13 15:59:19 Tower usbipd: usbipd: info: connection from 192.168.1.29:46248
	#	Feb 13 15:59:19 Tower usbipd: usbipd: info: received request: 0x8003(6)
	#	Feb 13 15:59:19 Tower usbipd: usbipd: info: found requested device: 3-2.2
	#	Feb 13 15:59:19 Tower usbipd: usbip: info: connect: 3-2.2
	#	Feb 13 15:59:19 Tower kernel: usbip-host 3-2.2: stub up
	#	Feb 13 15:59:19 Tower usbipd: usbipd: info: request 0x8003(6): complete
	#	Feb 13 15:59:19 Tower USBIP: debug: usbip syslog filter triggered



	#var_dump($syslog_entry) ;

#		if (preg_match('/^(?P<date>\S+) info: connection from (?P<IP>\S+)(?P<Port>.*)$/', $syslog_entry, $arrMatch)) {
#			var_dump($arrMatch) ;
#			var_dump($syslog_entry) ;
#	}
#	}
}

switch ($COMMAND) {
	case 'modules_load':
		usbip_modules_load();
		break;

	case 'start_daemon':
		usbipd_start();
		break;

	case 'stop_daemon':
		usbipd_stop();
		break;

	case 'reload':
		usbip_reload();
		break;

	case 'refresh':
		break;

	case 'usb_add':
		usbip_log("Info: rc.unraid.usbip-gui {$argv[1]} {$_ENV['ID_SERIAL']} {$_ENV['DEVNAME']} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']}");
		usb_device_add_action($_ENV['ID_SERIAL']) ;
		break;

	case 'usb_remove':
		usbip_log("Info: rc.unraid.usbip-gui {$argv[1]} {$physical_busid} {$_ENV['ID_SERIAL']} {$_ENV['DEVNAME']} {$_ENV['BUSNUM']} {$_ENV['DEVNUM']} ");
		usb_device_remove_action($_ENV['BUSNUM'] ,$_ENV['DEVNUM'] ) ;
		break;

	case 'vm_action':
		#usbip_log("Info: rc.unraid.usbip-gui  {$argv[1]} {$argv[2]} {$argv[3]} {$argv[4]} {$argv[5]}");
		process_vm_usb_devices($argv[2],$argv[3] ) ;
		break;	

	case 'check_config':
		usbip_check_config() ;
		break;	

	case 'usb_syslog':
		usbip_syslog_processing($argv[2]) ;
		break;	

	case 'USBMgrBuildConnectedStatus':
		usbip_log("Info: rc.unraid.usbip-gui Building Connected Status") ;
		USBMgrBuildConnectedStatus() ;
		break;	

	case 'USBMgrResetConnectedStatus':
		usbip_log("Info: rc.unraid.usbip-gui Reset Connected Status") ;
		USBMgrResetConnectedStatus() ;
		break;	

	default:
		usbip_log("Error: rc.unraid.usbip-gui {$argv[1]} {$argv[2]} {$argv[3]} {$argv[4]} not understood");
		usbip_log("rc.unraid.usbip-gui usage: 'modules_load','start_daemon','stop_daemon', 'reload', 'refresh', 'check_config");
		exit(0);
		break;
}
?>
